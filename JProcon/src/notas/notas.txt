JAVA --> enviar consultas --> MySQL

botones --> programacion --> codigo para enviar una consulta --> malo,

Conexion --> conectar --> enviar consultas

Connection --> conectar
	-> java --> cualquier motor --> URL conexión

	jdbc:mysql/localhost/procon?user=root&pass=123456
Statement  --> enviar las consultas o ejecutarlas
ResultSet  --> Procesar un select --> CALL proc



consultas --> 	
	1.- no retornan datos --> insert, update, delete
	2.- Retornar --> select, procedures, view


	conexion --> 
		public 2 métodos funciones --> void , ResultSet

		public desconectar();

		insert, delete, update --> ejecutar, cerrar
		select --> ejecutar, retornar rs



GUI --> Data.java --> Conexion --> MySQL 

CALL x()

crearX(); --> CALL X()



GUI --> Botón eliminar --> d.eliminar(1)

public void eliminar(int id){
    ejecutar("CALL eliminar(2)")
}

Tiempo de mantenimiento!


Data --> TODOS los métodos para cambiar la BD


los más fáciles son los insert, update, delete
lo más "peluo" select --> procedimientos que tengan select






17 de mayo de 2018:
    - INSERT, DELETE, UPDATE --> papa
    - SELECT --> papa --> más pasos
        1.- Analizar el resultado de la consulta en MySQL
            En nuestro caso, el procedimiento buscarContacto('pat')
            arroja los campos id, nombre, correo
        2.- Existe alguna clase Java que permita guardar esos datos?
            en el caso que la respuesta sea no, tu creas una clase
            que soporte esos campos. En nuestro caso, existe la clase
            Contacto
        3.- Crear un método en data, que retorne una lista de ese tipo (Contacto)

            public List<Contacto> buscarContacto(String texto){
            
            }



Función o método --> tres partes --> 
    Un trozo de codigo con un nombre
    
    "acceso" "tipo de retorno" "nombre"(parametros){}

    acceso, se dice que es publico cuando ese método se pueda
    acceder desde otra clase

    






